---
// index.astro
---
<html>
  <head>
    <title>24 Game Solver (24bot)</title>
  </head>
  <body class="bg-gray-100 text-gray-900 p-6">
    <!-- Main Container -->
    <div class="container mx-auto max-w-md bg-white shadow-md rounded-lg p-6">
      <h1 class="text-2xl font-bold text-center mb-4">Solve the 24 Game (24bot)</h1>
      
      <!-- Input Group -->
      <div class="form-group mb-4">
        <label for="input-numbers" class="block text-sm font-medium mb-2">Enter numbers (comma-separated)</label>
        <input
          type="text"
          id="input-numbers"
          class="form-control border-gray-300 focus:ring-blue-500 focus:border-blue-500 rounded-md p-2 w-full"
          placeholder="E.g., 4, 4, 8, 2"
        />
      </div>

      <!-- Solve Button -->
      <button
        id="solve-button"
        class="btn bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-md w-full"
      >
        Solve
      </button>

      <!-- Log Container -->
      <div id="result-container" class="hidden mt-6">
        <h2 class="text-lg font-semibold mb-2">Logs</h2>
        <div
          id="log"
          class="border border-gray-300 rounded-md p-4 bg-gray-50 max-h-96 overflow-y-auto font-mono text-sm"
        ></div>
      </div>

      <!-- Solutions Container -->
      <div id="solutions-container" class="hidden mt-6">
        <h2 class="text-lg font-semibold mb-2">Valid Solutions</h2>
        <div
          id="solutions"
          class="border border-gray-300 rounded-md p-4 bg-gray-50 max-h-96 overflow-y-auto font-mono text-sm"
        ></div>
      </div>
    </div>

    <!-- No-JS Warning -->
    <noscript>
      <div class="no-js-overlay fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center">
        <div class="no-js-message bg-white p-4 rounded shadow-lg text-center">
          <p class="text-gray-900 font-semibold">This application cannot work without JavaScript. Please enable JavaScript to use it.</p>
        </div>
      </div>
    </noscript>

    <script>
      document.getElementById("solve-button").addEventListener("click", () => {
        const input = document.getElementById("input-numbers").value;
        const numbers = input.split(",").map((num) => parseFloat(num.trim()));
        const logElement = document.getElementById("log");
        const resultContainer = document.getElementById("result-container");
        const solutionsContainer = document.getElementById("solutions-container");

        // Clear previous logs and solutions
        logElement.innerHTML = "";
        document.getElementById("solutions").innerHTML = "";

        // Hide the containers initially
        resultContainer.classList.add("hidden");
        solutionsContainer.classList.add("hidden");

        if (numbers.length !== 4 || numbers.some(isNaN)) {
          logError("Error: 24bot requires exactly four valid numbers.");
          resultContainer.classList.remove("hidden");
          return;
        }

        const start = performance.now();

        const solutions = [];
        const equationsChecked = [];

        // Start solving the game
        calculate24(numbers, (equation, result) => {
          equationsChecked.push({ equation, result });
          if (Math.abs(result - 24) < 0.00001) {
            solutions.push(equation); // Collect valid solutions
          }
        });

        const end = performance.now();

        // Display all logs and valid solutions only after the solving process is done
        equationsChecked.forEach(({ equation, result }) => {
          const div = document.createElement("div");
          div.textContent = `${equation} = ${result}`;
          if (Math.abs(result - 24) < 0.00001) {
            div.className = "text-green-600 font-bold"; // Highlight valid solutions
          } else {
            div.className = "text-red-600 font-bold"; // Invalid solutions in bold red
          }
          logElement.appendChild(div);
        });

        // Display valid solutions
        if (solutions.length > 0) {
          solutions.forEach((sol) => {
            const div = document.createElement("div");
            div.textContent = sol;
            div.className = "text-green-600 font-bold";
            document.getElementById("solutions").appendChild(div);
          });
        } else {
          const div = document.createElement("div");
          div.textContent = "No valid solutions found.";
          div.className = "text-red-600 font-bold";
          document.getElementById("solutions").appendChild(div);
        }

        // Show both containers after all the work is done
        resultContainer.classList.remove("hidden");
        solutionsContainer.classList.remove("hidden");

        // Display the completion message
        const resultDiv = document.createElement("div");
        resultDiv.textContent = `Checked all possibilities (Completed in ${Math.round(end - start)}ms) - Powered by 24bot ðŸ¤–`;
        resultDiv.className = "text-green-600 font-bold mt-4";
        logElement.appendChild(resultDiv);
      });

      function logError(message) {
        const logElement = document.getElementById("log");
        const errorDiv = document.createElement("div");
        errorDiv.textContent = message;
        errorDiv.className = "text-red-600 font-bold";
        logElement.appendChild(errorDiv);
      }

      function calculate24(numbers, onProgress) {
        const operators = ["+", "-", "*", "/"];
        const results = [];
        let found = false;

        // Helper: Generate permutations of an array
        function permute(arr, m = []) {
          if (arr.length === 0) results.push(m);
          for (let i = 0; i < arr.length; i++) {
            const curr = arr.slice();
            const next = curr.splice(i, 1);
            permute(curr.slice(), m.concat(next));
          }
        }

        permute(numbers);

        // Iterate through permutations
        for (const perm of results) {
          if (found) break;

          for (const op1 of operators) {
            for (const op2 of operators) {
              for (const op3 of operators) {
                // Build equation formats with minimal parentheses
                const equations = [
                  `${perm[0]} ${op1} ${perm[1]} ${op2} ${perm[2]} ${op3} ${perm[3]}`,
                  `(${perm[0]} ${op1} ${perm[1]}) ${op2} ${perm[2]} ${op3} ${perm[3]}`,
                  `${perm[0]} ${op1} (${perm[1]} ${op2} ${perm[2]}) ${op3} ${perm[3]}`,
                  `${perm[0]} ${op1} ${perm[1]} ${op2} (${perm[2]} ${op3} ${perm[3]})`,
                  `((${perm[0]} ${op1} ${perm[1]}) ${op2} ${perm[2]}) ${op3} ${perm[3]}`,
                ];

                for (const equation of equations) {
                  try {
                    // Evaluate the equation
                    const result = eval(equation);

                    // Log the equation and its result
                    onProgress(equation, result);

                    // Check for 24
                    if (Math.abs(result - 24) < 0.00001) {
                      found = true;
                      return equation; // Return the first valid equation
                    }
                  } catch {
                    // Skip invalid equations
                  }
                }
              }
            }
          }
        }

        return null;
      }
    </script>
  </body>
</html>
